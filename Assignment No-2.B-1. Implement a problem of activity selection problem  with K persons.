Implement a problem of activity selection problem 
with K persons.
Statement: Given two arrays S[] and E[] of size N denoting starting 
and closing time of the shops and an integer value K denoting the 
number of people, the task is to find out the maximum number of 
shops they can visit in total if they visit each shop optimally based 
on the following conditions:
 A shop can be visited by only one person
 A person cannot visit another shop if its timing collide with it

Input: S[] = {1, 8, 3, 2, 6}, E[] = {5, 10, 6, 5, 9}, K = 2
Output: 4




#include <bits/stdc++.h>
using namespace std;
bool compareBy(const pair<int, int>& a,
               const pair<int, int>& b)
{
    if (a.second != b.second)
        return a.second < b.second;
    return a.first < b.first;
}
int maximumShops(int* opening, int* closing,
                 int n, int k)
{
    pair<int, int> a[n];
    for (int i = 0; i < n; i++) 
    {
        a[i].first = opening[i];
        a[i].second = closing[i];
    }
    sort(a, a + n, compareBy);
    int count = 0;
    multiset<int> st;
 
    for (int i = 0; i < n; i++) 
    {
        bool flag = false;
        if (!st.empty()) 
        {
            auto it = st.upper_bound(a[i].first);
            if (it != st.begin())
            {
                it--;
                if (*it <= a[i].first) 
                {
                    st.erase(it);
                    st.insert(a[i].second);
                    count++;
                    flag = true;
                }
            }
        }
        if (st.size() < k && flag == false) 
        {
            st.insert(a[i].second);
            count++;
        }
    }
    return count;
}
int main()
{
    int S[] = { 1, 8, 3, 2, 6 };
    int E[] = { 5, 10, 6, 5, 9 };
    int K = 2, N = sizeof(S)
                   / sizeof(S[0]);
    cout << maximumShops(S, E, N, K) << endl;
}
